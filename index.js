#!/usr/bin/env node


import { Command } from 'commander';
import { main } from './src/cli.js';
import fs from 'fs';
import path from 'path';
import { verifyBaseBranchExists } from './src/gitUtils.js';

const CONFIG_PATH = path.resolve(process.cwd(), '.mo3ta-coverage.json');

function readConfig() {
  console.log(`Reading config from: ${CONFIG_PATH}`);
  
  if (fs.existsSync(CONFIG_PATH)) {
    return JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
  }
  return {};
}

function writeConfig(config) {
  fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
  console.log(`Updated config: ${JSON.stringify(config, null, 2)}`);
}

const program = new Command();

program
  .name('mo3ta-coverage')
  .description('Run tests and report uncovered changed lines in a PR. Checks cumulative coverage for all changed lines against a specified limit. Useful for CI and code review workflows.');

program
  .option('--base <branch>', 'Base branch to compare against (e.g., origin/main)')
  .option('--lcov <path>', 'Path to lcov.info file generated by test coverage tools', 'coverage/lcov.info')
  .option('--limit <percent>', 'Minimum required coverage percentage for all changed lines (e.g., 80)', '80')
  .option('--showCovered <bool>', 'Show covered changed lines in the output', false)
  .option('--shallow <bool>', 'Run test files only without deep in tests tree', true)
  .enablePositionalOptions(); // used to allow using same options in subcommands


program
  .command('config')
  .description('Set or get configuration options')
  .option('--base <branch>', 'Set default base branch')
  .option('--shallow <bool>', 'Set default shallow value (true/false)')
  .action((opts) => {
    let config = readConfig();

    let updated = false;

    if (opts.base) {
      verifyBaseBranchExists(opts.base);
      
      config.base = opts.base;
      updated = true;
      console.log(`Default base branch set to: ${opts.base}`);
    }

    if (typeof opts.shallow !== 'undefined') {
      config.shallow = opts.shallow === 'true' || opts.shallow === true;
      updated = true;
      console.log(`Default shallow set to: ${config.shallow}`);
    }
    if (updated) {
      writeConfig(config);
    } else {
      console.log('Current config:', config);
    }
    process.exit(0);
  })
  .enablePositionalOptions()


program.action((opts) => {
  const config = readConfig();
  const options = program.opts();
 
  // Use config base if not provided in CLI
  if (!options.base && config.base) {
    options.base = config.base;
  } else if (!options.base) {
    options.base = 'origin/main';
  }
  // Use config shallow if not provided in CLI
  console.log(`Using shallow: ${options.shallow} ${config.shallow}`);

  options.shallow = config.shallow ?? options.shallow;

  console.log(`Final options: ${JSON.stringify(options, null, 2)}`);

  main(options);
});

await program.parseAsync(process.argv);